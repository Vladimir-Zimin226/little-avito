/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.skypro.homework.controller.api;

import ru.skypro.homework.dto.*;
import ru.skypro.homework.dto.AdDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-21T12:05:35.370405200+05:00[Asia/Tashkent]")
@Validated
@Tag(name = "ads", description = "the ads API")
public interface AdsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /ads : Добавление объявления
     *
     * @param properties (required)
     * @param image      (required)
     * @return Created (status code 201)
     * or Unauthorized (status code 401)
     */
    default ResponseEntity<AdDto> addAd(
            @Parameter(name = "properties", description = "", required = true) @Valid @RequestParam(value = "properties", required = true) CreateOrUpdateAdDto properties,
            @Parameter(name = "image", description = "", required = true) @RequestPart(value = "image", required = true) MultipartFile image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ads/{id}/comments : Добавление комментария к объявлению
     *
     * @param id                       (required)
     * @param createOrUpdateCommentDto (optional)
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     * or Not found (status code 404)
     */
    default ResponseEntity<CommentDto> addComment(
            @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id,
            @Parameter(name = "CreateOrUpdateCommentDto", description = "") @Valid @RequestBody(required = false) CreateOrUpdateCommentDto createOrUpdateCommentDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : 1, \"authorFirstName\" : \"authorFirstName\", \"author\" : 6, \"authorImage\" : \"authorImage\", \"pk\" : 5, \"text\" : \"text\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ads/{adId}/comments/{commentId} : Удаление комментария
     *
     * @param adId      (required)
     * @param commentId (required)
     * @return OK (status code 200)
     * or Forbidden (status code 403)
     * or Unauthorized (status code 401)
     * or Not found (status code 404)
     */
    default ResponseEntity<Void> deleteComment(
            @Parameter(name = "adId", description = "", required = true) @PathVariable("adId") Integer adId,
            @Parameter(name = "commentId", description = "", required = true) @PathVariable("commentId") Integer commentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads/{id} : Получение информации об объявлении
     *
     * @param id (required)
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     * or Not found (status code 404)
     */

    default ResponseEntity<ExtendedAdDto> getAds(
            @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"authorLastName\" : \"authorLastName\", \"authorFirstName\" : \"authorFirstName\", \"phone\" : \"phone\", \"price\" : 6, \"description\" : \"description\", \"pk\" : 0, \"title\" : \"title\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads/me : Получение объявлений авторизованного пользователя
     *
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     */
    default ResponseEntity<AdsDto> getAdsMe(

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 0, \"results\" : [ { \"image\" : \"image\", \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }, { \"image\" : \"image\", \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads : Получение всех объявлений
     *
     * @return OK (status code 200)
     */
    default ResponseEntity<AdsDto> getAllAds() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 0, \"results\" : [ { \"image\" : \"image\", \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }, { \"image\" : \"image\", \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ads/{id}/comments : Получение комментариев объявления
     *
     * @param id (required)
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     * or Not found (status code 404)
     */
    default ResponseEntity<CommentsDto> getComments(
            @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"count\" : 0, \"results\" : [ { \"createdAt\" : 1, \"authorFirstName\" : \"authorFirstName\", \"author\" : 6, \"authorImage\" : \"authorImage\", \"pk\" : 5, \"text\" : \"text\" }, { \"createdAt\" : 1, \"authorFirstName\" : \"authorFirstName\", \"author\" : 6, \"authorImage\" : \"authorImage\", \"pk\" : 5, \"text\" : \"text\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ads/{id} : Удаление объявления
     *
     * @param id (required)
     * @return No Content (status code 204)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not found (status code 404)
     */
    default ResponseEntity<Void> removeAd(
            @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /ads/{id} : Обновление информации об объявлении
     *
     * @param id                  (required)
     * @param createOrUpdateAdDto (optional)
     * @return OK (status code 200)
     * or Forbidden (status code 403)
     * or Unauthorized (status code 401)
     * or Not found (status code 404)
     */
    default ResponseEntity<AdDto> updateAds(
            @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id,
            @Parameter(name = "CreateOrUpdateAdDto", description = "") @Valid @RequestBody(required = false) CreateOrUpdateAdDto createOrUpdateAdDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"author\" : 6, \"price\" : 5, \"pk\" : 1, \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /ads/{adId}/comments/{commentId} : Обновление комментария
     *
     * @param adId                     (required)
     * @param commentId                (required)
     * @param createOrUpdateCommentDto (optional)
     * @return OK (status code 200)
     * or Forbidden (status code 403)
     * or Unauthorized (status code 401)
     * or Not found (status code 404)
     */
    default ResponseEntity<CommentDto> updateComment(
            @Parameter(name = "adId", description = "", required = true) @PathVariable("adId") Integer adId,
            @Parameter(name = "commentId", description = "", required = true) @PathVariable("commentId") Integer commentId,
            @Parameter(name = "CreateOrUpdateCommentDto", description = "") @Valid @RequestBody(required = false) CreateOrUpdateCommentDto createOrUpdateCommentDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : 1, \"authorFirstName\" : \"authorFirstName\", \"author\" : 6, \"authorImage\" : \"authorImage\", \"pk\" : 5, \"text\" : \"text\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /ads/{id}/image : Обновление картинки объявления
     *
     * @param id    (required)
     * @param image (required)
     * @return OK (status code 200)
     * or Forbidden (status code 403)
     * or Unauthorized (status code 401)
     * or Not found (status code 404)
     */
    default ResponseEntity<List<byte[]>> updateImage(
            @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id,
            @Parameter(name = "image", description = "", required = true) @RequestPart(value = "image", required = true) MultipartFile image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
